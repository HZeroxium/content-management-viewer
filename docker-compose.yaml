services:
  redis:
    container_name: content-management-redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - content-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    container_name: content-management-mongodb
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - content-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    container_name: content-management-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URI=mongodb://admin:password@mongodb:27017/content-management?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - SPACES_ENDPOINT=${SPACES_ENDPOINT}
      - SPACES_KEY=${SPACES_KEY}
      - SPACES_SECRET=${SPACES_SECRET}
      - SPACES_BUCKET=${SPACES_BUCKET}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - content-management-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-dashboard:
    container_name: content-management-admin-dashboard
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:3001
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - content-management-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  content-management-network:
    driver: bridge
